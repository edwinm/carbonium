{"version":3,"file":"bundle.min.js","sources":["../src/carbonium.ts"],"sourcesContent":["/**\n Carbonium __buildVersion__\n @copyright 2020 Edwin Martin\n @license MIT\n */\n\nexport function $<T extends HTMLElement = HTMLElement>(\n  selectors: string,\n  parentNode?: Document | ShadowRoot | HTMLElement\n): CarboniumType<T> {\n  let nodelist: NodeListOf<T>;\n\n  // If the first parameter starts with \"<\", create a DOM node\n  if (selectors[0] == \"<\") {\n    nodelist = <NodeListOf<T>>(\n      (<unknown>[\n        new DOMParser().parseFromString(selectors, \"text/html\").body.firstChild,\n      ])\n    );\n  } else {\n    // Else, do querySelectorAll\n    nodelist = (parentNode || document).querySelectorAll(selectors);\n  }\n\n  // Wrap it in a Proxy\n  return <CarboniumType<T>>(\n    (<unknown>new Proxy<NodeListOf<T>>(nodelist, proxyHandler))\n  );\n}\n\n// Used by style, classList and relList\n// When setting one of these, remember the elements to apply to\nlet currentListNodelist: NodeListOf<HTMLElement>;\nlet propList: \"style\" | \"classList\" | \"relList\";\n\nconst proxyHandler: ProxyHandler<NodeListOf<HTMLElement>> = {\n  get(target, prop) {\n    let propValue = null;\n\n    // Return iterator when asked for iterator, only used in ES2015+\n    if (prop == Symbol.iterator) {\n      return function* () {\n        for (let i = 0; i < target.length; i++) {\n          yield target[i];\n        }\n      };\n    }\n\n    // Special case for style, classList and relList\n    if (prop == \"style\" || prop == \"classList\" || prop == \"relList\") {\n      currentListNodelist = target;\n      propList = prop;\n      // Matched elements can be a list of any element or an empty list\n      // Use getter of, for example, document.body.style\n      const propValue = Reflect.get(document.body, prop);\n      return new Proxy(propValue, proxyHandler);\n    }\n\n    // style.setProperty, getPropertyValue…, classList.add, contains, remove…, relList…\n    if (\n      target instanceof CSSStyleDeclaration ||\n      target instanceof DOMTokenList\n    ) {\n      // Matched elements can be a list of any element or an empty list\n      // Use getter of, for example, document.body.style.color\n      propValue = Reflect.get(document.body[propList], prop);\n\n      // When getter is a function, apply it to all matched elements\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            currentListNodelist.forEach((el) => {\n              Reflect.apply(target, el[propList], argumentsList);\n            });\n            return new Proxy(currentListNodelist, proxyHandler);\n          },\n        });\n      } else {\n        return propValue;\n      }\n    }\n\n    // Are we dealing with an Array function like forEach, map and filter?\n    if (Array.prototype.hasOwnProperty(prop)) {\n      const propValue = Reflect.get(Array.prototype, prop);\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            const ret = Reflect.apply(target, thisArg, argumentsList);\n            // When function returns undefined (like forEach),\n            // return all matched elements, so calls can be chained\n            // For example forEach(…).setAttribute(…)\n            const newTarget = typeof ret != \"undefined\" ? ret : thisArg;\n            return new Proxy(newTarget, proxyHandler);\n          },\n        });\n      }\n    }\n\n    // Get property or call function on DOM elements\n    if (target.length > 0) {\n      // Might be DOM element specific, like input.select(),\n      // so use first array element to get reference\n      if (prop in target[0]) {\n        propValue = Reflect.get(target[0], prop);\n      }\n    } else {\n      // Empty list, targeted DOM element unknown,\n      // use getter of document.body\n      if (prop in document.body) {\n        propValue = Reflect.get(document.body, prop);\n      }\n    }\n\n    // Propagate DOM prop value\n    if (propValue) {\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            let retFirst = null;\n            let first = true;\n            // Apply on individual elements\n            for (const el of thisArg) {\n              const ret = Reflect.apply(target, el, argumentsList);\n              if (first) {\n                retFirst = ret;\n                first = false;\n              }\n            }\n            return retFirst != null && retFirst != undefined\n              ? retFirst\n              : thisArg;\n          },\n        });\n      } else {\n        return propValue;\n      }\n    }\n\n    // Default\n    return Reflect.get(target, prop);\n  },\n\n  // DOM property is set\n  set(target, prop, value) {\n    if (\"forEach\" in target && !(target instanceof CSSStyleDeclaration)) {\n      target.forEach((el) => {\n        Reflect.set(el, prop, value);\n      });\n    } else {\n      Reflect.set(target, prop, value);\n    }\n    return true;\n  },\n\n  deleteProperty(target, prop) {\n    if (prop in target) {\n      return delete target[prop];\n    }\n    return false;\n  },\n};\n\nexport type CarboniumType<T extends HTMLElement = HTMLElement> =\n  CarboniumList<T> & T;\n\n// Interface definitions\n\ninterface CarboniumList<T extends HTMLElement> extends Array<T> {\n  concat(...items: ConcatArray<T>[]): CarboniumType<T>;\n\n  concat(...items: (T | ConcatArray<T>)[]): CarboniumType<T>;\n\n  reverse(): CarboniumType<T>;\n\n  slice(start?: number, end?: number): CarboniumType<T>;\n\n  splice(start: number, deleteCount?: number): CarboniumType<T>;\n\n  /* tslint:disable:unified-signatures */\n  splice(start: number, deleteCount: number, ...items: T[]): CarboniumType<T>;\n\n  forEach(\n    callbackfn: (value: T, index: number, array: T[]) => void,\n    thisArg?: any\n  ): CarboniumType<T>;\n\n  filter(\n    callbackfn: (value: T, index: number, array: T[]) => boolean,\n    thisArg?: any\n  ): CarboniumType<T>;\n\n  setAttribute(qualifiedName: string, value: string): CarboniumType<T>;\n\n  classList: CarboniumClassList<T>;\n  style: CarboniumStyleList<T>;\n}\n\ninterface CarboniumClassList<T extends HTMLElement> extends DOMTokenList {\n  add(...tokens: string[]): CarboniumType<T>;\n\n  remove(...tokens: string[]): CarboniumType<T>;\n\n  replace(oldToken: string, newToken: string): boolean;\n\n  forEach(\n    callbackfn: (value: string, key: number, parent: DOMTokenList) => void,\n    thisArg?: any\n  ): CarboniumType<T>;\n}\n\ninterface CarboniumStyleList<T extends HTMLElement>\n  extends CSSStyleDeclaration {\n  removeProperty(property: string): CarboniumList<T> & string;\n\n  setProperty(\n    property: string,\n    value: string | null,\n    priority?: string\n  ): CarboniumType<T>;\n}\n"],"names":["$","selectors","parentNode","nodelist","DOMParser","parseFromString","body","firstChild","document","querySelectorAll","Proxy","proxyHandler","currentListNodelist","propList","get","target","prop","propValue","Symbol","iterator","i","length","Reflect","CSSStyleDeclaration","DOMTokenList","apply","thisArg","argumentsList","forEach","el","Array","prototype","hasOwnProperty","ret","retFirst","first","undefined","set","value","deleteProperty"],"mappings":";;;;;SAMgBA,EACdC,EACAC,GAEA,IAAIC,EAeJ,OAXEA,EADkB,KAAhBF,EAAU,GAEA,EACR,IAAIG,WAAYC,gBAAgBJ,EAAW,aAAaK,KAAKC,aAKrDL,GAAcM,UAAUC,iBAAiBR,GAK3C,IAAIS,MAAqBP,EAAUQ,GAMjD,IAAIC,EACAC,EAEJ,MAAMF,EAAsD,CAC1DG,IAAIC,EAAQC,GACV,IAAIC,EAAY,KAGhB,GAAID,GAAQE,OAAOC,SACjB,OAAO,YACL,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,UAC3BL,EAAOK,IAMnB,GAAY,SAARJ,GAA2B,aAARA,GAA+B,WAARA,EAAmB,CAC/DJ,EAAsBG,EACtBF,EAAWG,EAGX,MAAMC,EAAYK,QAAQR,IAAIN,SAASF,KAAMU,GAC7C,OAAO,IAAIN,MAAMO,EAAWN,GAI9B,GACEI,aAAkBQ,qBAClBR,aAAkBS,aAOlB,OAHAP,EAAYK,QAAQR,IAAIN,SAASF,KAAKO,GAAWG,GAGzB,mBAAbC,EACF,IAAIP,MAAgBO,EAAW,CACpCQ,MAAO,SAAUV,EAAQW,EAASC,GAIhC,OAHAf,EAAoBgB,SAASC,IAC3BP,QAAQG,MAAMV,EAAQc,EAAGhB,GAAWc,MAE/B,IAAIjB,MAAME,EAAqBD,MAInCM,EAKX,GAAIa,MAAMC,UAAUC,eAAehB,GAAO,CACxC,MAAMC,EAAYK,QAAQR,IAAIgB,MAAMC,UAAWf,GAC/C,GAAwB,mBAAbC,EACT,OAAO,IAAIP,MAAgBO,EAAW,CACpCQ,MAAO,SAAUV,EAAQW,EAASC,GAChC,MAAMM,EAAMX,QAAQG,MAAMV,EAAQW,EAASC,GAK3C,OAAO,IAAIjB,WADqB,IAAPuB,EAAqBA,EAAMP,EACxBf,MAsBpC,OAfII,EAAOM,OAAS,EAGdL,KAAQD,EAAO,KACjBE,EAAYK,QAAQR,IAAIC,EAAO,GAAIC,IAKjCA,KAAQR,SAASF,OACnBW,EAAYK,QAAQR,IAAIN,SAASF,KAAMU,IAKvCC,EACsB,mBAAbA,EACF,IAAIP,MAAgBO,EAAW,CACpCQ,MAAO,SAAUV,EAAQW,EAASC,GAChC,IAAIO,EAAW,KACXC,GAAQ,EAEZ,IAAK,MAAMN,KAAMH,EAAS,CACxB,MAAMO,EAAMX,QAAQG,MAAMV,EAAQc,EAAIF,GAClCQ,IACFD,EAAWD,EACXE,GAAQ,GAGZ,OAAmB,MAAZD,GAAgCE,MAAZF,EACvBA,EACAR,KAIDT,EAKJK,QAAQR,IAAIC,EAAQC,IAI7BqB,IAAG,CAACtB,EAAQC,EAAMsB,OACZ,YAAavB,IAAYA,aAAkBQ,oBAK7CD,QAAQe,IAAItB,EAAQC,EAAMsB,GAJ1BvB,EAAOa,SAASC,IACdP,QAAQe,IAAIR,EAAIb,EAAMsB,OAKnB,GAGTC,eAAc,CAACxB,EAAQC,IACjBA,KAAQD,UACIA,EAAOC"}